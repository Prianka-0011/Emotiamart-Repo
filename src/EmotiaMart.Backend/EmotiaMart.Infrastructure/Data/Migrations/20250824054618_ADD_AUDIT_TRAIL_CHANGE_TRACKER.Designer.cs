// <auto-generated />
using System;
using EmotiaMart.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmotiaMart.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250824054618_ADD_AUDIT_TRAIL_CHANGE_TRACKER")]
    partial class ADD_AUDIT_TRAIL_CHANGE_TRACKER
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_BLOB_TRIGGER", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TRIGGER_NAME")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TRIGGER_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("BLOB_DATA")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");

                    b.ToTable("EMOTIA_QRTZ_BLOB_TRIGGERS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_CALENDAR", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("CALENDAR_NAME")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("CALENDAR")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SCHED_NAME", "CALENDAR_NAME");

                    b.ToTable("EMOTIA_QRTZ_CALENDARS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_CRON_TRIGGER", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TRIGGER_NAME")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TRIGGER_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CRON_EXPRESSION")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TIME_ZONE_ID")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");

                    b.ToTable("EMOTIA_QRTZ_CRON_TRIGGERS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_FIRED_TRIGGER", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("ENTRY_ID")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<long>("FIRED_TIME")
                        .HasColumnType("bigint");

                    b.Property<string>("INSTANCE_NAME")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IS_NONCONCURRENT")
                        .HasColumnType("bit");

                    b.Property<string>("JOB_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("JOB_NAME")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PRIORITY")
                        .HasColumnType("int");

                    b.Property<bool?>("REQUESTS_RECOVERY")
                        .HasColumnType("bit");

                    b.Property<long>("SCHED_TIME")
                        .HasColumnType("bigint");

                    b.Property<string>("STATE")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("TRIGGER_GROUP")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TRIGGER_NAME")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("SCHED_NAME", "ENTRY_ID");

                    b.HasIndex(new[] { "SCHED_NAME", "JOB_GROUP", "JOB_NAME" }, "IDX_QRTZ_FT_G_J");

                    b.HasIndex(new[] { "SCHED_NAME", "TRIGGER_GROUP", "TRIGGER_NAME" }, "IDX_QRTZ_FT_G_T");

                    b.HasIndex(new[] { "SCHED_NAME", "INSTANCE_NAME", "REQUESTS_RECOVERY" }, "IDX_QRTZ_FT_INST_JOB_REQ_RCVRY");

                    b.ToTable("EMOTIA_QRTZ_FIRED_TRIGGERS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_JOB_DETAIL", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("JOB_NAME")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("JOB_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DESCRIPTION")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IS_DURABLE")
                        .HasColumnType("bit");

                    b.Property<bool>("IS_NONCONCURRENT")
                        .HasColumnType("bit");

                    b.Property<bool>("IS_UPDATE_DATA")
                        .HasColumnType("bit");

                    b.Property<string>("JOB_CLASS_NAME")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte[]>("JOB_DATA")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("REQUESTS_RECOVERY")
                        .HasColumnType("bit");

                    b.HasKey("SCHED_NAME", "JOB_NAME", "JOB_GROUP");

                    b.ToTable("EMOTIA_QRTZ_JOB_DETAILS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_LOCK", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("LOCK_NAME")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SCHED_NAME", "LOCK_NAME");

                    b.ToTable("EMOTIA_QRTZ_LOCKS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_PAUSED_TRIGGER_GRP", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TRIGGER_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("SCHED_NAME", "TRIGGER_GROUP");

                    b.ToTable("EMOTIA_QRTZ_PAUSED_TRIGGER_GRPS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_SCHEDULER_STATE", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("INSTANCE_NAME")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("CHECKIN_INTERVAL")
                        .HasColumnType("bigint");

                    b.Property<long>("LAST_CHECKIN_TIME")
                        .HasColumnType("bigint");

                    b.HasKey("SCHED_NAME", "INSTANCE_NAME");

                    b.ToTable("EMOTIA_QRTZ_SCHEDULER_STATE");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_SIMPLE_TRIGGER", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TRIGGER_NAME")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TRIGGER_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("REPEAT_COUNT")
                        .HasColumnType("int");

                    b.Property<long>("REPEAT_INTERVAL")
                        .HasColumnType("bigint");

                    b.Property<int>("TIMES_TRIGGERED")
                        .HasColumnType("int");

                    b.HasKey("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");

                    b.ToTable("EMOTIA_QRTZ_SIMPLE_TRIGGERS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_SIMPROP_TRIGGER", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TRIGGER_NAME")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TRIGGER_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("BOOL_PROP_1")
                        .HasColumnType("bit");

                    b.Property<bool?>("BOOL_PROP_2")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DEC_PROP_1")
                        .HasColumnType("numeric(13, 4)");

                    b.Property<decimal?>("DEC_PROP_2")
                        .HasColumnType("numeric(13, 4)");

                    b.Property<int?>("INT_PROP_1")
                        .HasColumnType("int");

                    b.Property<int?>("INT_PROP_2")
                        .HasColumnType("int");

                    b.Property<long?>("LONG_PROP_1")
                        .HasColumnType("bigint");

                    b.Property<long?>("LONG_PROP_2")
                        .HasColumnType("bigint");

                    b.Property<string>("STR_PROP_1")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("STR_PROP_2")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("STR_PROP_3")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("TIME_ZONE_ID")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");

                    b.ToTable("EMOTIA_QRTZ_SIMPROP_TRIGGERS");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_TRIGGER", b =>
                {
                    b.Property<string>("SCHED_NAME")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TRIGGER_NAME")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TRIGGER_GROUP")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CALENDAR_NAME")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DESCRIPTION")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("END_TIME")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("JOB_DATA")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("JOB_GROUP")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("JOB_NAME")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("MISFIRE_INSTR")
                        .HasColumnType("int");

                    b.Property<long?>("NEXT_FIRE_TIME")
                        .HasColumnType("bigint");

                    b.Property<long?>("PREV_FIRE_TIME")
                        .HasColumnType("bigint");

                    b.Property<int?>("PRIORITY")
                        .HasColumnType("int");

                    b.Property<long>("START_TIME")
                        .HasColumnType("bigint");

                    b.Property<string>("TRIGGER_STATE")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("TRIGGER_TYPE")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");

                    b.HasIndex("SCHED_NAME", "JOB_NAME", "JOB_GROUP");

                    b.HasIndex(new[] { "SCHED_NAME", "CALENDAR_NAME" }, "IDX_QRTZ_T_C");

                    b.HasIndex(new[] { "SCHED_NAME", "JOB_GROUP", "JOB_NAME" }, "IDX_QRTZ_T_G_J");

                    b.HasIndex(new[] { "SCHED_NAME", "NEXT_FIRE_TIME" }, "IDX_QRTZ_T_NEXT_FIRE_TIME");

                    b.HasIndex(new[] { "SCHED_NAME", "TRIGGER_STATE", "NEXT_FIRE_TIME" }, "IDX_QRTZ_T_NFT_ST");

                    b.HasIndex(new[] { "SCHED_NAME", "MISFIRE_INSTR", "NEXT_FIRE_TIME", "TRIGGER_STATE" }, "IDX_QRTZ_T_NFT_ST_MISFIRE");

                    b.HasIndex(new[] { "SCHED_NAME", "MISFIRE_INSTR", "NEXT_FIRE_TIME", "TRIGGER_GROUP", "TRIGGER_STATE" }, "IDX_QRTZ_T_NFT_ST_MISFIRE_GRP");

                    b.HasIndex(new[] { "SCHED_NAME", "TRIGGER_GROUP", "TRIGGER_STATE" }, "IDX_QRTZ_T_N_G_STATE");

                    b.HasIndex(new[] { "SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP", "TRIGGER_STATE" }, "IDX_QRTZ_T_N_STATE");

                    b.HasIndex(new[] { "SCHED_NAME", "TRIGGER_STATE" }, "IDX_QRTZ_T_STATE");

                    b.ToTable("EMOTIA_QRTZ_TRIGGERS");
                });

            modelBuilder.Entity("EmotiaMart.Infrastructure.Data.AuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChangedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangedProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_CRON_TRIGGER", b =>
                {
                    b.HasOne("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_TRIGGER", "EMOTIA_QRTZ_TRIGGER")
                        .WithOne("EMOTIA_QRTZ_CRON_TRIGGER")
                        .HasForeignKey("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_CRON_TRIGGER", "SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMOTIA_QRTZ_TRIGGER");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_SIMPLE_TRIGGER", b =>
                {
                    b.HasOne("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_TRIGGER", "EMOTIA_QRTZ_TRIGGER")
                        .WithOne("EMOTIA_QRTZ_SIMPLE_TRIGGER")
                        .HasForeignKey("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_SIMPLE_TRIGGER", "SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMOTIA_QRTZ_TRIGGER");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_SIMPROP_TRIGGER", b =>
                {
                    b.HasOne("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_TRIGGER", "EMOTIA_QRTZ_TRIGGER")
                        .WithOne("EMOTIA_QRTZ_SIMPROP_TRIGGER")
                        .HasForeignKey("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_SIMPROP_TRIGGER", "SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMOTIA_QRTZ_TRIGGER");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_TRIGGER", b =>
                {
                    b.HasOne("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_JOB_DETAIL", "EMOTIA_QRTZ_JOB_DETAIL")
                        .WithMany("EMOTIA_QRTZ_TRIGGERs")
                        .HasForeignKey("SCHED_NAME", "JOB_NAME", "JOB_GROUP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMOTIA_QRTZ_JOB_DETAIL");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_JOB_DETAIL", b =>
                {
                    b.Navigation("EMOTIA_QRTZ_TRIGGERs");
                });

            modelBuilder.Entity("EmotiaMart.Domain.Quartz.EMOTIA_QRTZ_TRIGGER", b =>
                {
                    b.Navigation("EMOTIA_QRTZ_CRON_TRIGGER");

                    b.Navigation("EMOTIA_QRTZ_SIMPLE_TRIGGER");

                    b.Navigation("EMOTIA_QRTZ_SIMPROP_TRIGGER");
                });
#pragma warning restore 612, 618
        }
    }
}
